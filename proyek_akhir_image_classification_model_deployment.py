# -*- coding: utf-8 -*-
"""Proyek Akhir_Image Classification Model Deployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GPJjVRztnXPTpVP_9etmx8tNrkXGcVZm

# Belajar Pengembangan Machine Learning - Proyek Akhir_Image Classification Model Deployment

## Data Diri

Nama : Adi Bintang Pradana <br>
Alamat : Jl. Budi Mulia No. 1, Jakarta <br>
No. HP : 087784537428 <br>
Email : adibintangprada@gmail.com

## Import Library
"""

import os
import glob
import cv2
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow.python.keras.callbacks import ModelCheckpoint, EarlyStopping

"""## Load Dataset"""

#!unzip '/content/drive/MyDrive/Dataset for Colabs/archive.zip'

"""## Manual Train Test Split and Image Augmentation"""

train = '/content/seg_train/seg_train'
os.listdir(train)

Normalized = tf.keras.preprocessing.image.ImageDataGenerator(rescale = 1/255)
data = Normalized.flow_from_directory(train ,target_size=(150,150),
                                               batch_size = 128,
                                               class_mode='sparse',shuffle = 'True')

test_path =  '/content/seg_test/seg_test'
test_data = tf.keras.preprocessing.image.ImageDataGenerator(rescale = 1/255)
test_data = test_data.flow_from_directory(test_path ,target_size = (150,150),
                                               batch_size = 128,
                                               class_mode='sparse',shuffle = 'True')

"""## Creating Model Architecture"""

res = tf.keras.applications.resnet_v2.ResNet50V2(
    input_shape=None, 
    include_top=False , weights= 'imagenet', input_tensor=None, pooling=None)

tf.keras.Sequential()

for layer in res.layers:
  layer.trainable = False
global_pool = tf.keras.layers.GlobalAveragePooling2D()(res.output)
flat = tf.keras.layers.Flatten()(global_pool)
drop = tf.keras.layers.Dropout(0.5)(flat)
dense1 = tf.keras.layers.Dense(1000, activation = 'relu')(drop)
drop = tf.keras.layers.Dropout(0.5)(dense1)
dense2 = tf.keras.layers.Dense(1000, activation = 'relu')(drop)
last_layer = tf.keras.layers.Dense(6 ,activation = 'softmax')(dense2)
model = tf.keras.Model (inputs = res.input ,outputs = last_layer)

model.compile(
    optimizer = tf.keras.optimizers.RMSprop(),
    loss = 'SparseCategoricalCrossentropy',
    metrics = 'accuracy' 
)

model.summary()

"""## Defining Callback and Best Model Checkpoint"""

filepath= "final_project.h5"
checkpoint = ModelCheckpoint(filepath, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max', save_weights_only=False)

early_stopping = EarlyStopping(monitor='val_loss',
                               min_delta = 0, 
                               patience = 5, 
                               verbose = 1, 
                               restore_best_weights=True)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.9):
      print("\nAkurasi telah mencapai >90%!")
      self.model.stop_training = True
callbacks = myCallback()

callback_params = [checkpoint,
                   early_stopping,
                   callbacks]

"""## Run the Model"""

hist = model.fit(data , validation_data= test_data ,epochs = 30 ,callbacks=callback_params)

best_model = tf.keras.models.load_model("final_project.h5")

"""## Loss and Accuracy Visualization"""

plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('Akurasi Model')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc='lower right')
plt.show()

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

"""## Saving in TFLite Format"""

converter = tf.lite.TFLiteConverter.from_keras_model(best_model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)

